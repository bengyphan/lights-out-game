{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","initialBoard","y","row","x","push","Math","random","createBoard","board","setBoard","coord","oldBoard","split","map","Number","flipCell","boardCopy","JSON","parse","stringify","every","cell","table","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAqBeA,MALf,YAA6C,IAA7BC,EAA4B,EAA5BA,kBAAmBC,EAAS,EAATA,MAC3BC,EAAO,eAAWD,EAAQ,WAAa,IAC7C,OAAO,wBAAIE,UAAWD,EAASE,QAASJ,K,MCwF3BK,MA7Ef,YAAsE,IAAD,IAApDC,aAAoD,MAA5C,EAA4C,MAAzCC,aAAyC,MAAjC,EAAiC,MAA9BC,2BAA8B,MAAR,IAAQ,IAC1CC,mBAG1B,WAGC,IAFA,IAAIC,EAAe,GAEVC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE/B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIN,EAAOM,IAC1BD,EAAIE,KAAKC,KAAKC,SAAWR,GAE1BE,EAAaI,KAAKF,GAEnB,OAAOF,EAb2BO,IADiC,mBAC7DC,EAD6D,KACtDC,EADsD,KAsBpE,SAASnB,EAAkBoB,GAC1BD,GAAS,SAAAE,GAAa,IAAD,EACLD,EAAME,MAAM,KAAKC,IAAIC,QADhB,mBACbb,EADa,KACVE,EADU,KAGdY,EAAW,SAACd,EAAGE,EAAGa,GAGnBb,GAAK,GAAKA,EAAIN,GAASI,GAAK,GAAKA,EAAIL,IACxCoB,EAAUf,GAAGE,IAAMa,EAAUf,GAAGE,KAK9Ba,EAAYC,KAAKC,MAAMD,KAAKE,UAAUR,IAQ1C,OANAI,EAASd,EAAGE,EAAGa,GACfD,EAASd,EAAGE,EAAI,EAAGa,GACnBD,EAASd,EAAGE,EAAI,EAAGa,GACnBD,EAASd,EAAI,EAAGE,EAAGa,GACnBD,EAASd,EAAI,EAAGE,EAAGa,GAEZA,KAIT,GA5BQR,EAAMY,OAAM,SAAAlB,GAAG,OAAIA,EAAIkB,OAAM,SAAAC,GAAI,OAAKA,QA6B7C,OAAO,yBAAK5B,UAAU,UAAf,YAKR,IAFA,IAAI6B,EAAQ,GAEHrB,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE/B,IADA,IAAIC,EAAM,GADqB,WAEtBC,GACR,IAAIO,EAAK,UAAMT,EAAN,YAAWE,GACpBD,EAAIE,KACH,kBAAC,EAAD,CACCmB,IAAKb,EACLnB,MAAOiB,EAAMP,GAAGE,GAChBb,kBAAmB,kBAAMA,EAAkBoB,QANrCP,EAAI,EAAGA,EAAIN,EAAOM,IAAM,EAAxBA,GAUTmB,EAAMlB,KAAK,wBAAImB,IAAKtB,GAAIC,IAGzB,OACC,6BACC,2BAAOT,UAAU,SAChB,+BAAQ6B,M,MCtFGE,MARf,WACC,OACC,yBAAK/B,UAAU,OACd,kBAAC,EAAD,QCGiBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d83417b1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n\tconst [board, setBoard] = useState(createBoard());\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\tfunction createBoard() {\n\t\tlet initialBoard = [];\n\t\t// TODO: create array-of-arrays of true/false values\n\t\tfor (let y = 0; y < nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < ncols; x++) {\n\t\t\t\trow.push(Math.random() < chanceLightStartsOn);\n\t\t\t}\n\t\t\tinitialBoard.push(row);\n\t\t}\n\t\treturn initialBoard;\n\t}\n\n\tfunction hasWon() {\n\t\t// TODO: check the board in state to determine whether the player has won.\n\t\treturn board.every(row => row.every(cell => !cell));\n\t}\n\n\tfunction flipCellsAroundMe(coord) {\n\t\tsetBoard(oldBoard => {\n\t\t\tconst [y, x] = coord.split('-').map(Number);\n\n\t\t\tconst flipCell = (y, x, boardCopy) => {\n\t\t\t\t// if this coord is actually on board, flip it\n\n\t\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\t\tboardCopy[y][x] = !boardCopy[y][x];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// TODO: Make a (deep) copy of the oldBoard\n\t\t\tlet boardCopy = JSON.parse(JSON.stringify(oldBoard));\n\t\t\t// TODO: in the copy, flip this cell and the cells around it\n\t\t\tflipCell(y, x, boardCopy);\n\t\t\tflipCell(y, x + 1, boardCopy);\n\t\t\tflipCell(y, x - 1, boardCopy);\n\t\t\tflipCell(y - 1, x, boardCopy);\n\t\t\tflipCell(y + 1, x, boardCopy);\n\t\t\t// TODO: return the copy\n\t\t\treturn boardCopy;\n\t\t});\n\t}\n\n\tif (hasWon()) {\n\t\treturn <div className=\"winner\">You Won!</div>;\n\t}\n\n\tlet table = [];\n\n\tfor (let y = 0; y < nrows; y++) {\n\t\tlet row = [];\n\t\tfor (let x = 0; x < ncols; x++) {\n\t\t\tlet coord = `${y}-${x}`;\n\t\t\trow.push(\n\t\t\t\t<Cell\n\t\t\t\t\tkey={coord}\n\t\t\t\t\tisLit={board[y][x]}\n\t\t\t\t\tflipCellsAroundMe={() => flipCellsAroundMe(coord)}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\ttable.push(<tr key={y}>{row}</tr>);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"Board\">\n\t\t\t\t<tbody>{table}</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Board />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}